package com.project.back_end.models;

import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.persistence.*;
import jakarta.validation.constraints.*;

import java.time.LocalDate;

@Entity
public class Admin {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @NotNull(message = "First name is required")
    @Size(min = 3, max = 50, message = "First name must be 3 to 50 characters long")
    @Column(length = 50, nullable = false)
    private String firstName;

    @NotNull(message = "Last name is required")
    @Size(min = 3, max = 50, message = "Last name must be 3 to 50 characters long")
    @Column(length = 50, nullable = false)
    private String lastName;

    @NotNull(message = "Username cannot be null")
    @Column(unique = true, nullable = false)
    private String username;

    @NotNull(message = "Password cannot be null")
    @JsonProperty(access = JsonProperty.Access.WRITE_ONLY)
    @Column(nullable = false)
    private String password;

    @NotNull(message = "Role is required")
    @ManyToOne
    @JoinColumn(name = "role_id", nullable = false)
    private Role roleId;

    @Column(nullable = false)
    private int employmentStatus = 1; // 0 = deactivated, 1 = active --> default 1

    @Column(updatable = false)
    private LocalDate createDate;

    @PrePersist
    protected void onCreate() {
        this.createDate = LocalDate.now();
    }

    // constructors
    public Admin() {}

    public Admin(String firstName, String lastName, String username, String password, Role roleId, int employmentStatus) {
        this.firstName = firstName;
        this.lastName = lastName;
        this.username = username;
        this.password = password;
        this.roleId = roleId;
        this.employmentStatus = employmentStatus;
    }

    // getters and setters
    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public Role getRoleId() {
        return roleId;
    }

    public void setRoleId(Role roleId) {
        this.roleId = roleId;
    }

    public int getEmploymentStatus() {
        return employmentStatus;
    }

    public void setEmploymentStatus(int employmentStatus) {
        this.employmentStatus = employmentStatus;
    }

    public LocalDate getCreateDate() {
        return createDate;
    }

    public void setCreateDate(LocalDate createDate) {
        this.createDate = createDate;
    }

    public LocalDate getDeactivateDate() {
        return employmentStatus == 0 ? LocalDate.now() : null;
    }
}
// @Entity annotation:
//    - Marks the class as a JPA entity, which means it represents a table in the database.
//    - It is required for persistence frameworks like Hibernate to map the class to a database table.

// 1. 'id' field:
//    - Type: private Long
//    - Description:
//      - Represents the unique identifier for the Admin entity.
//      - This field is auto-generated by the database using @GeneratedValue with strategy GenerationType.IDENTITY.
//      - It is the primary key of the entity, identified by @Id annotation.

// 2. 'username' field:
//    - Type: private String
//    - Description:
//      - Represents the username of the admin.
//      - Used to log into the system.
//      - @NotNull validation ensures that this field cannot be null when creating or updating an Admin.

// 3. 'password' field:
//    - Type: private String
//    - Description:
//      - Represents the password of the admin for authentication.
//      - The field is marked with @JsonProperty(access = JsonProperty.Access.WRITE_ONLY) to prevent the password from being exposed in JSON responses.
//      - @NotNull validation ensures the password cannot be null when creating or updating an Admin.

// 4. Constructor(s):
//    - A no-argument constructor is implicitly provided, required by JPA for entity creation.
//    - A parameterized constructor can be added as needed.

// 5. Getters and Setters:
//    - Standard getter and setter methods are provided for accessing and modifying the fields.